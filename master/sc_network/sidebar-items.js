window.SIDEBAR_ITEMS = {"enum":[["Keypair","Identity keypair of a node."],["NotificationSenderError","Error returned by [`NetworkNotification::notification_sender`]."],["ObservedRole","Role that the peer sent to us during the handshake, with the addition of what our local node knows about that peer."],["OutboundFailure","Possible failures occurring in the context of sending an outbound request and receiving the response."],["PublicKey","The public key of a node’s identity keypair."],["SyncState","Reported sync state."],["WarpSyncPhase","Reported warp sync phase."]],"mod":[["config","Configuration of the networking layer."],["error","Substrate network possible errors."],["event","Network event types. These are are not the part of the protocol, but rather events that happen on the network like DHT get/put results received."],["multiaddr",""],["network_state","Information about the networking, for diagnostic purposes."],["request_responses","Collection of request-response protocols."],["types","`sc-network` type definitions"],["utils","`sc-network` utilities"]],"struct":[["DecodingError","An error during decoding of key material."],["ExtendedPeerInfo","Info about a peer’s known state (both full and light)."],["KademliaKey","The (opaque) key of a record."],["Multiaddr","Representation of a Multiaddr."],["NetworkService","Substrate network service. Handles network IO and manages connectivity."],["NetworkStatus","Overview status of the network."],["NetworkWorker","Main network worker. Must be polled in order for the network to advance."],["NotificationSender","A `NotificationSender` allows for sending notifications to a peer with a chosen protocol."],["NotificationsSink","Sink connected directly to the node background task. Allows sending notifications to the peer."],["PeerId","Identifier of a peer of the network."],["ReputationChange","Description of a reputation adjustment for a node."],["RequestResponseConfig","The configuration for a `RequestResponse` protocol."],["Signature","A result of signing a message with a network identity. Since `PeerId` is potentially a hash of a `PublicKey`, you need to reveal the `PublicKey` next to the signature, so the verifier can check if the signature was made by the entity that controls a given `PeerId`."],["StateDownloadProgress","Reported state download progress."],["WarpSyncProgress","Reported warp sync progress."]],"trait":[["NetworkBlock","Provides ability to announce blocks to the network."],["NetworkDHTProvider","Provides access to the networking DHT."],["NetworkEventStream","Provides access to network-level event stream."],["NetworkNotification","Provides ability to send network notifications."],["NetworkPeers","Provides low-level API for manipulating network peers."],["NetworkRequest","Provides ability to send network requests."],["NetworkSigner","Signer with network identity"],["NetworkStateInfo","Trait for providing information about the local network state"],["NetworkStatusProvider","Provides high-level status information about network."],["NetworkSyncForkRequest","Provides an ability to set a fork sync request for a particular block."],["NotificationSenderReady","Reserved slot in the notifications buffer, ready to accept data."],["NotificationSenderT","A `NotificationSender` allows for sending notifications to a peer with a chosen protocol."],["SyncEventStream",""],["SyncStatusProvider","Provides high-level status of syncing."]]};