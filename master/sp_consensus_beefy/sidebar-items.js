window.SIDEBAR_ITEMS = {"constant":[["BEEFY_ENGINE_ID","The `ConsensusEngineId` of BEEFY."],["GENESIS_AUTHORITY_SET_ID","Authority set id starts with zero at BEEFY pallet genesis."],["KEY_TYPE","Key type for BEEFY module."]],"enum":[["ConsensusLog","A consensus log item for BEEFY."],["Keyring","Set of test accounts using [`crate::crypto`] types."],["VersionedFinalityProof","A [SignedCommitment] with a version number."]],"fn":[["check_commitment_signature","Check a commitment signature by encoding the commitment and verifying the provided signature using the expected authority id."],["check_equivocation_proof","Verifies the equivocation proof by making sure that both votes target different blocks and that its signatures are valid."],["generate_equivocation_proof","Create a new `EquivocationProof` based on given arguments."]],"mod":[["crypto","BEEFY cryptographic types"],["known_payloads","Registry of all known [`BeefyPayloadId`]."],["mmr","BEEFY + MMR utilties."],["witness","Primitives for light, 2-phase interactive verification protocol."]],"struct":[["Commitment","A commitment signed by GRANDPA validators as part of BEEFY protocol."],["EquivocationProof","Proof of voter misbehavior on a given set id. Misbehavior/equivocation in BEEFY happens when a voter votes on the same round/block for different payloads. Proving is achieved by collecting the signed commitments of conflicting votes."],["KeyringIter","An iterator over the variants of [Self]"],["OpaqueKeyOwnershipProof","An opaque type used to represent the key ownership proof at the runtime API boundary. The inner value is an encoded representation of the actual key ownership proof which will be parameterized when defining the runtime. At the runtime API boundary this type is unknown and as such we keep this opaque representation, implementors of the runtime API will have to make sure that all usages of `OpaqueKeyOwnershipProof` refer to the same type."],["Payload","A BEEFY payload type allowing for future extensibility of adding additional kinds of payloads."],["SignedCommitment","A commitment with matching GRANDPA validatorsâ€™ signatures."],["ValidatorSet","A set of BEEFY authorities, a.k.a. validators."],["VoteMessage","BEEFY vote message."]],"trait":[["BeefyApi","API necessary for BEEFY voters."],["BeefyAuthorityId","Trait representing BEEFY authority id, including custom signature verification."],["OnNewValidatorSet","New BEEFY validator set notification hook."],["PayloadProvider","Trait for custom BEEFY payload providers."]],"type":[["AuthorityIndex","The index of an authority."],["BeefyPayloadId","Id of different payloads in the [`crate::Commitment`] data."],["MmrRootHash","The type used to represent an MMR root hash."],["ValidatorSetId","A typedef for validator set id."]]};