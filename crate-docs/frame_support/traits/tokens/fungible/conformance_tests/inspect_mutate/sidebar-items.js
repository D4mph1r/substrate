window.SIDEBAR_ITEMS = {"fn":[["burn_from_best_effort_success","Test the `burn_from` function for successfully burning tokens with a best-effort approach."],["burn_from_exact_insufficient_funds","Test the `burn_from` function for handling insufficient funds with `Precision::Exact`."],["burn_from_exact_success","Test the `burn_from` function for successfully burning an exact amount of tokens."],["can_deposit_below_minimum","Test the can_deposit function for returning a minimum balance error."],["can_deposit_overflow","Test the can_deposit function for returning an overflow error."],["can_deposit_success","Test the can_deposit function for returning a success value."],["can_withdraw_balance_low","Test the can_withdraw function for returning a low balance error."],["can_withdraw_reduced_to_zero","Test the can_withdraw function for withdrawal resulting in a reduced balance of zero."],["can_withdraw_success","Test the can_withdraw function for returning a success value."],["mint_into_below_minimum","Test the `mint_into` function for handling balances below the minimum value."],["mint_into_overflow","Test the `mint_into` function for overflow prevention."],["mint_into_success","Test the `mint_into` function for successful token minting."],["reducible_balance_expendable","Test the reducible_balance function with Preservation::Expendable."],["reducible_balance_protect_preserve","Test the reducible_balance function with Preservation::Protect and Preservation::Preserve."],["restore_below_minimum","Test the `restore` function for handling restoration below the minimum balance."],["restore_overflow","Test the `restore` function for handling balance overflow."],["restore_success","Test the `restore` function for successful restoration."],["set_balance_burn_success","Test the set_balance function for successful burning."],["set_balance_mint_success","Test the set_balance function for successful minting."],["shelve_insufficient_funds","Test the `shelve` function for handling insufficient funds."],["shelve_success","Test the `shelve` function for successful shelving."],["transfer_expendable_all","Test the `transfer` function with `Preservation::Expendable` for transferring the entire balance."],["transfer_expendable_dust","Test the transfer function with Preservation::Expendable for transferring amounts that leaves an account with less than the minimum balance."],["transfer_protect_preserve","Test the `transfer` function with `Preservation::Protect` and `Preservation::Preserve` for transferring the entire balance."],["transfer_success","Test the `transfer` function for a successful transfer."]]};